<!DOCTYPE html>
<html lang="pt-br">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Minha Rotina</title>
  <link rel="stylesheet" href="/css/p-minha-rotina.css">
  <link rel="stylesheet" href="/css/header2.css">
  <link rel="shortcut icon" href="../../Images/favicon.ico" type="image/x-icon">
</head>

<body>
  <header>
    <a href="/professor/p-professor"><img src="/images/voltar.svg" alt=""></a>
    <p>MINHA ROTINA</p>
    <div>
      <p><%= user.NOME_USU || 'Professor' %></p>
      <button class="user-icon" id="userIcon" aria-label="Abrir menu do usuário">
          <img id="header-profile-img" src="/professor/foto-perfil/<%= user.ID_USUARIO %>?v=<%= timestamp %>" alt="imagem do perfil"
          style="width: 48px; height: 48px; object-fit: cover; border-radius: 50%; border: 2px solid #ccc"
          onerror="this.onerror=null; this.src='/images/perfil.svg';"/>
          <div class="user-config" id="userConfig">
              <ul>
                  <li><a href="/professor/p-professor">MENU</a></li>
                  <li><a href="/professor/p-config">CONFIGURAÇÕES</a></li>
                  <li><a href="/professor/logout">SAIR</a></li>
              </ul>
          </div>
      </button>
  </div>
  </header>

  <main>
    <section class="container">
      <section class="calendario">
        <section class="tabela">
          <div class="calendario-header">
            <button id="prev">&lt;</button>
            <h2 id="mesAno"></h2>
            <button id="next">&gt;</button>
          </div>

          <table>
            <thead>
              <tr>
                <th>dom</th>
                <th>seg</th>
                <th>ter</th>
                <th>qua</th>
                <th>qui</th>
                <th>sex</th>
                <th>sáb</th>
              </tr>
            </thead>
            <tbody id="diasCalendario">
              <!-- Dias serão gerados dinamicamente aqui -->
            </tbody>
          </table>
        </section>
        <button id="hoje">Hoje</button>
      </section>
      <section class="tarefas">
        <section class="titulo-tarefas">
          <h2>tarefas</h2>
          <img src="/images/brush.svg" alt="Editar">
        </section>
        <section class="checkbox">
          <!-- Adicionar tarefas aqui -->
        </section>
      </section>
    </section>
  </main>
  <footer>
    <p>© 2024 Cappuensino. Todos os direitos reservados.</p>
  </footer>
  <script>
    const diasCalendario = document.getElementById("diasCalendario");
    const mesAno = document.getElementById("mesAno");
    const prev = document.getElementById("prev");
    const next = document.getElementById("next");
    const hoje = document.getElementById("hoje");

    let dataAtual = new Date();
    
    function gerarCalendario(data) {
      const ano = data.getFullYear();
      const mes = data.getMonth();
    
      const primeiroDia = new Date(ano, mes, 1).getDay();
      const ultimoDia = new Date(ano, mes + 1, 0).getDate();
    
      const nomesMes = ["Janeiro", "Fevereiro", "Março", "Abril", "Maio", "Junho",
                        "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro"];
    
      mesAno.textContent = `${nomesMes[mes]} ${ano}`;
      diasCalendario.innerHTML = "";
    
      let dia = 1;
      for (let i = 0; i < 6; i++) {
        const linha = document.createElement("tr");
        for (let j = 0; j < 7; j++) {
          const celula = document.createElement("td");
    
          if (i === 0 && j < primeiroDia) {
            celula.textContent = "";
          } else if (dia > ultimoDia) {
            celula.textContent = "";
          } else {
            celula.textContent = dia;
            if (
              dia === new Date().getDate() &&
              mes === new Date().getMonth() &&
              ano === new Date().getFullYear()
            ) {
              celula.style.backgroundColor = "black";
              celula.style.color = "white";
            }
            dia++;
          }
    
          linha.appendChild(celula);
        }
        diasCalendario.appendChild(linha);
      }
    }
    
    prev.addEventListener("click", () => {
      dataAtual.setMonth(dataAtual.getMonth() - 1);
      gerarCalendario(dataAtual);
    });
    
    next.addEventListener("click", () => {
      dataAtual.setMonth(dataAtual.getMonth() + 1);
      gerarCalendario(dataAtual);
    });
    
    gerarCalendario(dataAtual);

    hoje.addEventListener("click", () => {
      dataAtual = new Date(); // volta para o mês atual
      gerarCalendario(dataAtual);
    });
  </script>

  <script>
    const checkboxContainer = document.querySelector('.checkbox');

    // Salva tarefas no localStorage
    function salvarTarefas() {
      const tarefas = [];
      checkboxContainer.querySelectorAll('.check').forEach(section => {
        const checkbox = section.querySelector('input[type="checkbox"]');
        const label = section.querySelector('label');
        tarefas.push({
          id: checkbox.id,
          texto: label.textContent.trim(),
          marcada: checkbox.checked
        });
      });
      localStorage.setItem('tarefas', JSON.stringify(tarefas));
    }

    // Cria uma tarefa nova no DOM
    function criarTarefa({ id, texto, marcada }) {
      const novaTarefa = document.createElement('section');
      novaTarefa.className = 'check';
      novaTarefa.innerHTML = `
        <input type="checkbox" id="${id}">
        <label for="${id}" contenteditable="true">${texto}</label>
        <button aria-label="Apagar tarefa" class="btn-apagar"><img src="/images/delete.svg" alt="deletar" style="width: 24px; height: 24px;"></button>
      `;

      const checkbox = novaTarefa.querySelector('input[type="checkbox"]');
      const label = novaTarefa.querySelector('label');
      const btnApagar = novaTarefa.querySelector('.btn-apagar');

      // Aplica estilo conforme marcado
      aplicarEstiloTarefa(label, marcada);
      checkbox.checked = marcada;

      // Evento: mudar estilo ao marcar/desmarcar e salvar
      checkbox.addEventListener('change', () => {
        aplicarEstiloTarefa(label, checkbox.checked);
        salvarTarefas();
      });

      // Evento: apagar tarefa e salvar
      btnApagar.addEventListener('click', () => {
        novaTarefa.remove();
        salvarTarefas();
      });

      // Evento: salvar ao editar texto (blur)
      label.addEventListener('blur', () => {
        salvarTarefas();
      });

      checkboxContainer.appendChild(novaTarefa);
    }

    // Aplica estilo riscado e opacidade ao label conforme status da checkbox
    function aplicarEstiloTarefa(label, marcada) {
      label.style.textDecoration = marcada ? 'line-through' : 'none';
      label.style.opacity = marcada ? '0.5' : '1';
    }

    // Gera um id único para checkbox baseado em timestamp + random para evitar colisões
    function gerarIdUnico() {
      return 'check' + Date.now() + Math.floor(Math.random() * 1000);
    }

    // Adiciona nova tarefa pelo prompt
    function adicionarTarefa() {
      const texto = prompt('Digite a nova tarefa:');
      if (texto && texto.trim()) {
        const id = gerarIdUnico();
        criarTarefa({ id, texto: texto.trim(), marcada: false });
        salvarTarefas();
      }
    }

    // Botão para adicionar tarefa
    const botaoAdicionar = document.createElement('button');
    botaoAdicionar.textContent = '+ Adicionar tarefa';
    botaoAdicionar.style.marginTop = '20px';
    botaoAdicionar.addEventListener('click', adicionarTarefa);
    document.querySelector('.tarefas').appendChild(botaoAdicionar);

    // Carrega tarefas do localStorage ao iniciar
    function carregarTarefas() {
      const tarefasSalvas = JSON.parse(localStorage.getItem('tarefas') || '[]');
      tarefasSalvas.forEach(criarTarefa);
    }

    // Inicializa
    carregarTarefas();
  </script>
</body>
</html>
